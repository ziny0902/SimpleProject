#+title: Basic Text Draw
* OpenGL에서 TEXT 표시
1. 폰트 이미지를 texture의 형태로 GPU 메모리에 저장한다.
2. 그릴 문자의 texture 위치와 글자가 표시될 화면의 위치를 GPU로 보낸 fragment shader에서 문자를 그린다.
3. 문자의 RGB 값은 32bit floating point로 인코딩하여 보낸다.
4. texture의 위치 값은 0 - 1 사이이다.
5. font texture는 RED 채널 값만을 사용한다.
6. font를 로딩하기 위해 freetype 의 python wrapper 인터페이스를 이용한다.
7. 모든 문자의 넓이 높이가 같은 mono type 폰트만 지원한다.
[[file:picture/font.png][font]]

* source
** library import
#+begin_src python
from kivy.graphics import BindTexture, RenderContext
import numpy as np
import freetype as ft
import os
import ctypes
from kivy.graphics import Mesh
from kivy.graphics.texture import texture_create
from util import *
#+end_src
** shader program
IN_pos 값은 Text가 표시될 화면의 위치를 저장하며 IN_uv는 글자가 저장된 font
texture 위치를 나타낸다. 글자의 RGB값은 IN_color로 전송한다.
#+begin_src glsl
	layout(location = 0) in vec2 IN_pos;
	layout(location = 1) in vec2 IN_uv;
	layout(location = 2) in float IN_color;
#+end_src
RGB 값을 decoding 한다.
#+begin_src glsl
		FRAG.color = vec4(
			float((int(IN_color) >> 16)&255)/255.0,
			float((int(IN_color) >>  8)&255)/255.0,
			float((int(IN_color) >>  0)&255)/255.0,
			1.0
			);
#+end_src
font texture는 픽셀의 알파 채널 값만을 저장하고 있다.
#+begin_src glsl
		float sdf = texture(U_texture, FRAG.uv).r;
#+end_src
#+begin_src python
class BasicTextDraw():
	vs_str = '''
    #version 330
	layout(location = 0) in vec2 IN_pos;
	layout(location = 1) in vec2 IN_uv;
	layout(location = 2) in float IN_color;
    uniform vec4       iResolution;
    uniform mat4 projection_mat;

	out struct {
		vec2 uv;
		vec4 color;
	} FRAG;

	void main(){
        vec2 wpz = iResolution.zw;
		gl_Position = projection_mat*vec4(IN_pos+wpz, 0.0, 1.0);
		FRAG.uv = IN_uv;
		FRAG.color = vec4(
			float((int(IN_color) >> 16)&255)/255.0,
			float((int(IN_color) >>  8)&255)/255.0,
			float((int(IN_color) >>  0)&255)/255.0,
			1.0
			);
	}
	'''
	fs_str = '''
    #version 330
	in struct {
		vec2 uv;
		vec4 color;
	} FRAG;

	uniform sampler2D U_texture;
	out vec4 OUT_color;

	void main(){
		float sdf = texture(U_texture, FRAG.uv).r;
		float fw = 0.5*fwidth(sdf);
		float mask = smoothstep(0.5 - fw, 0.5 + fw, sdf);

		OUT_color = FRAG.color*mask;
	}
	'''
#+end_src
** shader input 데이터 구조 정의
#+begin_src python
	attr_layout = [
    	(b'IN_pos', 2, 'float'),
    	(b'IN_uv', 2, 'float'),
    	(b'IN_color', 1, 'float'),
	]
#+end_src
** class constructor
#+begin_src python
	def __init__(self, font='Ubuntu Mono Nerd Font Complete Mono.ttf', size=24):
		self.face = None
		self.bitmap = None
		self.cursor_x = 0.
		self.cursor_y = 0.
		self.vertices = []
		self.indices = []
		self.load_font_image(font, size)
		pass
#+end_src
** font image loading
- Freetype library를 사용.
- MONO font 가 아니라면 제대로 표시되지 않을 수 있다.
- 파일로 부터 font를 읽어 들인다.
- ASCII 0 - 127 값의 문자 폰트에서 최대 높이와 넓이를 구한다.
- ASCII 0 - 127 값의 문자들의 폰트 데이터 전체를 self.bitmap에 저장.
#+begin_src python
	def load_font_image(self, filename, size=24):
		assert os.path.exists(filename)
    	# Load font  and check it is monotype
		self.face = ft.Face(filename)
		self.face.set_char_size( size*64 )
		if not self.face.is_fixed_width:
			raise 'Font is not monotype'
    	# Determine largest glyph size
		width, height, ascender, descender = 0, 0, 0, 0
		for c in range(0, 128):
			self.face.load_char( chr(c), ft.FT_LOAD_RENDER | ft.FT_LOAD_FORCE_AUTOHINT )
			bitmap    = self.face.glyph.bitmap
			width     = max( width, bitmap.width )
			ascender  = max( ascender, self.face.glyph.bitmap_top )
			descender = max( descender, bitmap.rows - self.face.glyph.bitmap_top )
		height = ascender+descender
        #allocate bitmap array
		self.bitmap = np.zeros((height*8, width*16), dtype=np.ubyte)
        # load ascii 0 - 127 character font image
		for j in range(8):
			for i in range(16):
				self.face.load_char(chr(0+j*16+i), ft.FT_LOAD_RENDER | ft.FT_LOAD_FORCE_AUTOHINT )
				bitmap = self.face.glyph.bitmap
				x = i*width  + self.face.glyph.bitmap_left
				y = j*height + ascender - self.face.glyph.bitmap_top
				self.bitmap[y:y+bitmap.rows, x:x+bitmap.width].flat = bitmap.buffer
		self.glyph_w, self.glyph_h = float(width), float(height)
		self.glyph_dx, self.glyph_dy = float(width/self.bitmap.shape[1]), float(height/self.bitmap.shape[0])
#+end_src
** Create RenderContext
- 필요한 GLSL 파일을 컴파일하고 그 정보를 저장한 context를 리턴한다.
- bitmap을 texture 형태로 GPU 메모리에 업로드한다.
- R 채널값만 이용한다.
#+begin_src python
	def RenderContext(self):
		assert self.face is not None
		assert self.bitmap is not None
		canvas = RenderContext(use_parent_projection=True)
		canvas.shader.vs = self.vs_str
		canvas.shader.fs = self.fs_str
		texture.blit_buffer(self.bitmap.tobytes(), colorfmt='red', bufferfmt='ubyte')
		with canvas:
			BindTexture(texture=texture, index=1)
		canvas['U_texture'] = 1
		return canvas
#+end_src
** Glyph Metrics
- horizontal baseline
[[file:~/mnt/share-data/document/org-roam/picture/metrics.png][metrics 1]]
- vertical baseline
[[file:~/mnt/share-data/document/org-roam/picture/metrics2.png][metric  2]]
** Create Text Vertex data
- ord()은 문자를 integer 값으로 변환한다.
- 글자의 색상은 RGB 값을 32bit float으로 encoding 하여 저장한다. 0 - 24bit 값을 사용한다.
#+begin_src python
def cpTorgb(c):
    a = 0x00000000
    a = a | ( c[0] << 16)
    a = a | ( c[1] << 8)
    a = a | ( c[2]  )
    return a
#+end_src
- 글자가 그려질 위치를 사각형의 vertice 정보 형태로 저장한다.
- 현재의 커서 위치 (self.cursor_x, self.cursor_y)를 항상 저장해야 한다.
- puts()를 위한 내부 함수로 외부에서는 사용하지 않는다.
#+begin_src python
	def _putc(self, c, color=[255, 255, 255]):
		i = ord(c)
		if (c == '\n'):
			self.cursor_y -= float(self.glyph_h)
		elif (c == '\t'):
			self.cursor_x += float(self.glyph_w) * 4.
		elif (i < 128):
			x = i%16
			y = i//16
			color = float(cpTorgb(color))
			self.vertices.extend([
				self.cursor_x, self.cursor_y - self.glyph_h,
				float(x)*self.glyph_dx, float(y+1)*self.glyph_dy,
				color
				])
			self.vertices.extend([
				self.cursor_x, self.cursor_y,
				float(x)*self.glyph_dx, float(y)*self.glyph_dy,
				color
				])
			self.vertices.extend([
				self.cursor_x + self.glyph_w, self.cursor_y,
				float(x+1)*self.glyph_dx, float(y)*self.glyph_dy,
				color
				])
			self.vertices.extend([
				self.cursor_x + self.glyph_w, self.cursor_y - self.glyph_h,
				float(x+1)*self.glyph_dx, float(y+1)*self.glyph_dy,
				color
				])
			base = 4*(len(self.indices)//6)
			self.indices.extend([0+base, 1+base, 2+base, 0+base, 2+base, 3+base])
			self.cursor_x += float(self.glyph_w)
#+end_src
** puts()
호출될 때마다 새로운 위치에서 시작해야 하므로 함수 마지막에 cursor_x, cursor_y
값을 초기화한다.
#+begin_src python
	def puts(self, s, x, y, color=[255, 255, 255]):
		self.cursor_x = float(x)
		self.cursor_y = float(y)
		for c in s:
			self._putc(c, color)
		self.cursor_x, self.cursor_y = 0., 0.
#+end_src
** flush()
puts()호출을 통해 저장된 문자열의 정보를 GPU의 shader로 보내서 화면에 그린다.
#+begin_src python
	def flush(self, renderer=None):
		if renderer is None:
			self.vertices = []
			self.indices = []
			self.cursor_x, self.cursor_y = 0., 0.
			return
		with renderer:
			Mesh(
                vertices = self.vertices,
                indices= self.indices,
                fmt=self.attr_layout,
                mode='triangles',
			)
		self.vertices = []
		self.indices  = []
		self.cursor_x, self.cursor_y = 0., 0.
#+end_src
